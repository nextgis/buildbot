# -*- python -*-
# ex: set filetype=python:
#
# Environment variables:
# - BUILDBOT_SLAVE_PASSWORD
# - BUILDBOT_WORKER_PORT
# - BUILDBOT_WEB_PORT
# - BUILDBOT_EMAIL_RECIPIENTS
# - BUILDBOT_EMAIL_RELAYHOST
# - BUILDBOT_APITOKEN_GITHUB
# - BUILDBOT_APITOKEN_GITLAB
# - BUILDBOT_SENTRY_DSN
# - BUILDBOT_LDAP_URL
# - BUILDBOT_LDAP_BIND
# - BUILDBOT_LDAP_BINDPWD
# - BUILDBOT_LDAP_GROUP
# - BUILDBOT_LDAP_DN
# - BUILDBOT_DB_URL
# - BUILDBOT_DB_URL=postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}@db/{POSTGRES_DB}
# - BUILDBOT_QEMU_CONNECTION = qemu+ssh://ngw_admin@192.168.250.1:2022/system
# - BUILDBOT_FTP_USER
# - BUILSBOT_FTP_PASSWORD
#
# Database parameters are shared between containers
# - POSTGRES_USER=buildbot
# - POSTGRES_PASSWORD=change_me
# - POSTGRES_DB=buildbot

import os
from datetime import timedelta

from buildbot.plugins import reporters, util, worker
from twisted.python import log

import dockerservice
import ldapauth
from nextgis_buildbot.scenarios.docs import makedocs, updatedocs
from nextgis_buildbot.scenarios.linux import (
    build_flathub_sideload_repo,
    build_flatpak,
    makedeb,
)
from nextgis_buildbot.scenarios.mobile import makecrosscompile
from nextgis_buildbot.scenarios.windows import (
    create_installer,
    make_installer_framework,
    makeborsch,
)
from nextgis_buildbot.simple_secret_provider import SimpleSecretProvider

c = BuildmasterConfig = {}
c["change_source"] = []
c["schedulers"] = []
c["builders"] = []
c["services"] = []

# Global properties and secrets

c["properties"] = {
    "flatpak_gpg_key_grep": os.environ.get("FLATPAK_GPG_KEY_GREP", "<UNKNOWN>"),
    "flatpak_gpg_key_id": os.environ.get("FLATPAK_GPG_KEY_ID", "<UNKNOWN>"),
}

c["secretsProviders"] = [
    SimpleSecretProvider(
        {
            "flatpak_gpg_passphrase": os.environ.get(
                "FLATPAK_GPG_PASSPHRASE", "<UNKNOWN>"
            ),
            "flatpak_gpg_private_key": os.environ.get(
                "FLATPAK_GPG_PRIVATE_KEY", "<UNKNOWN>"
            ),
            "buildbot_password": os.environ.get("BUILDBOT_PASSWORD", "<UNKNOWN>"),
            "buildbot_slave_password": os.environ.get(
                "BUILDBOT_SLAVE_PASSWORD", "<UNKNOWN>"
            ),
        }
    )
]

####### Clean logs
c["configurators"] = [
    util.JanitorConfigurator(logHorizon=timedelta(weeks=4), hour=12, dayOfWeek=6)
]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.

c["workers"] = []
qemu_connection = os.environ.get("BUILDBOT_QEMU_CONNECTION")
slave_passwd = os.environ.get("BUILDBOT_SLAVE_PASSWORD", "secret")
if qemu_connection:
    c["workers"].append(
        worker.LibVirtWorker(
            "build-win-py3",
            slave_passwd,
            util.Connection(qemu_connection),
            "/home/ngw_admin/images/win7_py3_builder.qcow2",
            build_wait_timeout=0,  # 5*60,
            # keepalive_interval=25*60
        )
    )
    c["workers"].append(
        worker.LibVirtWorker(
            "build-mac-py3",
            slave_passwd,
            util.Connection(qemu_connection),
            "/home/ngw_admin/images/mac_py3_builder.qcow2",
            build_wait_timeout=0,  # 5*60,
            # keepalive_interval=25*60
        )
    )

docker_connection = os.environ.get("BUILDBOT_DOCKER_CONNECTION")
if docker_connection:
    github_buildbot_key_id = "tsyu0r5mp5e8ejn22pwj6ne8g"
    github_buildbot_key_name = "github_buildbot_key_new"
    github_buildbot_key_pub_id = "n129jzn1ukwp180wqj8mjwagn"
    github_buildbot_key_pub_name = "github_buildbot_key_pub_new"

    harbor_host = "harbor.nextgis.net"
    harbor_auth = {
        "username": os.environ.get("BUILDBOT_USER"),
        "password": os.environ.get("BUILDBOT_PASSWORD"),
        "host": harbor_host,
    }

    c["workers"].append(
        dockerservice.DockerSwarmLatentWorker(
            "build-doc",
            slave_passwd,
            docker_host=docker_connection,
            image=f"{harbor_host}/ngqgis/ngqgis/docs-worker:latest",
            autopull=True,
            registryAuth=harbor_auth,
            followStartupLogs=True,
            networks=["ng_external"],
            placementConstraints=[
                "node.labels.bb.worker==true",
            ],
            secrets=[
                {
                    "id": github_buildbot_key_id,
                    "name": github_buildbot_key_name,
                    "file": "/root/.ssh/id_rsa",
                    "mode": 0o400,
                },
                {
                    "id": github_buildbot_key_pub_id,
                    "name": github_buildbot_key_pub_name,
                    "file": "/root/.ssh/id_rsa.pub",
                    "mode": 0o440,
                },
                {
                    "id": "1qfwnzvcyx14euy52egt6087d",
                    "name": "buildbot.key",
                    "file": "/root/.ssh/www",
                    "mode": 0o400,
                },
                {
                    "id": "mm1say4s2b8vt0n3ytyv1hoha",
                    "name": "buildbot.pub",
                    "file": "/root/.ssh/www.pub",
                    "mode": 0o440,
                },
            ],
        )  # 'auto_remove': True,
    )

    for worker_image, worker_name in {
        "ubuntu-worker:focal": "deb-build-focal",
        "ubuntu-worker:jammy": "deb-build-jammy",
        "ubuntu-worker:noble": "deb-build-noble",
        "astra-worker:1.7": "deb-build-astra",
        "crosscompile-worker:r25c": "deb-build-jammy-crosscompile",
    }.items():
        c["workers"].append(
            dockerservice.DockerSwarmLatentWorker(
                worker_name,
                slave_passwd,
                docker_host=docker_connection,
                image=f"{harbor_host}/ngqgis/ngqgis/{worker_image}",
                autopull=True,
                registryAuth=harbor_auth,
                followStartupLogs=True,
                networks=["ng_external"],
                placementConstraints=[
                    "node.labels.bb.worker==true",
                ],
                secrets=[
                    {
                        "id": github_buildbot_key_id,
                        "name": github_buildbot_key_name,
                        "file": "/root/.ssh/id_rsa",
                        "mode": 0o400,
                    },
                    {
                        "id": github_buildbot_key_pub_id,
                        "name": github_buildbot_key_pub_name,
                        "file": "/root/.ssh/id_rsa.pub",
                        "mode": 0o440,
                    },
                ],
            )
        )

    ssh_key_secret_name = "buildbot_ssh_key"
    ssh_key_secret_id = "8da0jdynxyrrf7ytrm9mvlu11"

    ssh_key_secret_pub_name = "buildbot_ssh_pub_key"
    ssh_key_secret_pub_id = "yqhq9voy3nbqmucczux61yfjk"

    c["workers"].append(
        dockerservice.DockerSwarmLatentWorker(
            "flatpak",
            slave_passwd,
            docker_host=docker_connection,
            image=f"{harbor_host}/ngqgis/ngqgis/flatpak-worker:kde-5.15-24.08",
            autopull=True,
            registryAuth=harbor_auth,
            followStartupLogs=True,
            networks=["ng_external"],
            placementConstraints=[
                "node.labels.bb.worker==true",
            ],
            secrets=[
                {
                    "id": ssh_key_secret_id,
                    "name": ssh_key_secret_name,
                    "file": "/root/.ssh/id_ed25519",
                    "mode": 0o400,
                },
                {
                    "id": ssh_key_secret_pub_id,
                    "name": ssh_key_secret_pub_name,
                    "file": "/root/.ssh/id_ed25519.pub",
                    "mode": 0o440,
                },
                {
                    "id": github_buildbot_key_id,
                    "name": github_buildbot_key_name,
                    "file": "/root/.ssh/id_rsa",
                    "mode": 0o400,
                },
                {
                    "id": github_buildbot_key_pub_id,
                    "name": github_buildbot_key_pub_name,
                    "file": "/root/.ssh/id_rsa.pub",
                    "mode": 0o440,
                },
            ],
        )
    )

# Not latent workers:
# worker.Worker("build-nix", slave_passwd, max_builds=2),

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c["protocols"] = {"pb": {"port": os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

### Add scenarios

scenario_modules = [
    # Windows
    makeborsch,
    create_installer,
    make_installer_framework,
    # Linux
    build_flathub_sideload_repo,
    build_flatpak,
    makedeb,
    # Mobile
    makecrosscompile,
    # Docs
    makedocs,
    updatedocs,
]

# Combine configs
for module in scenario_modules:
    config = module.make_config()
    for key, value in config.items():
        log.msg(
            "Add scenario. Append '{}':{}".format(key, [item.name for item in value])
        )
        c[key].extend(value)


####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

extraRecipients = []
extraRecipientsStr = os.environ.get("BUILDBOT_EMAIL_RECIPIENTS")
if extraRecipientsStr:
    extraRecipients = extraRecipientsStr.split(",")

m = reporters.MailNotifier(
    fromaddr="buildbot@nextgis.com",
    extraRecipients=extraRecipients,
    relayhost=os.environ.get("BUILDBOT_EMAIL_RELAYHOST", "192.168.245.229"),
    # useTls=True,
    sendToInterestedUsers=False,
)
c["services"].append(m)

# context = util.Interpolate("buildbot/%(prop:buildername)s")
gs_tocken = os.environ.get("BUILDBOT_APITOKEN_GITHUB")
if gs_tocken:
    gs = reporters.GitHubStatusPush(
        token=gs_tocken,
        verbose=True,
    )
    c["services"].append(gs)

gl_token = os.environ.get("BUILDBOT_APITOKEN_GITLAB")
if gl_token:
    gl = reporters.GitLabStatusPush(
        token=gl_token,
        verbose=True,
    )
    c["services"].append(gl)

c["buildbotNetUsageData"] = "basic"

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c["title"] = "NextGIS"
c["titleURL"] = "https://nextgis.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c["buildbotURL"] = os.environ.get("BUILDBOT_WEB_URL", "https://buildbot.nextgis.com/")

# minimalistic config to activate new web UI
c["www"] = {
    "port": os.environ.get("BUILDBOT_WEB_PORT", 8010),
    "plugins": {
        "waterfall_view": {},
        "console_view": {},
        "grid_view": {},
        "badges": {},
    },
    "versions": [
        ("master.cfg", "3.0.0"),
    ],
    "auth": ldapauth.LDAPAuth(
        os.environ.get("BUILDBOT_LDAP_URL", "ldap://192.168.250.1"),
        os.environ.get("BUILDBOT_LDAP_DN", "dc=nextgis,dc=com"),
        os.environ.get("BUILDBOT_LDAP_BIND", "cn=admin,dc=nextgis,dc=com"),
        os.environ.get("BUILDBOT_LDAP_BINDPWD", "secret"),
        os.environ.get("BUILDBOT_LDAP_GROUP", "buildbot"),
    ),
    "authz": util.Authz(
        allowRules=[
            util.AnyEndpointMatcher(role="buildbot", defaultDeny=True),
        ],
        roleMatchers=[
            util.RolesFromGroups(),
        ],
    ),
}

####### DB URL

c["db"] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    "db_url": os.environ.get("BUILDBOT_DB_URL", "sqlite://"),
}
