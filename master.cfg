# -*- python -*-
# ex: set filetype=python:
#
# Environment variables:
# - BUILDBOT_SLAVE_PASSWORD
# - BUILDBOT_WORKER_PORT
# - BUILDBOT_WEB_PORT
# - BUILDBOT_EMAIL_RECIPIENTS
# - BUILDBOT_EMAIL_RELAYHOST
# - BUILDBOT_APITOKEN_GITHUB
# - BUILDBOT_APITOKEN_GITLAB
# - BUILDBOT_SENTRY_DSN
# - BUILDBOT_LDAP_URL
# - BUILDBOT_LDAP_BIND
# - BUILDBOT_LDAP_BINDPWD
# - BUILDBOT_LDAP_GROUP
# - BUILDBOT_LDAP_DN
# - BUILDBOT_DB_URL
# - BUILDBOT_DB_URL=postgresql+psycopg2://{POSTGRES_USER}:{POSTGRES_PASSWORD}@db/{POSTGRES_DB}
# - BUILDBOT_QEMU_CONNECTION = qemu+ssh://ngw_admin@192.168.250.1:2022/system
# - BUILDBOT_FTP_USER
# - BUILSBOT_FTP_PASSWORD
# # database parameters are shared between containers
# POSTGRES_PASSWORD=change_me
# POSTGRES_USER=buildbot
# POSTGRES_DB=buildbot

from buildbot.plugins import *
from twisted.python import log
import os
import ldapauth
import importlib
from datetime import timedelta

scenarios_and_dependences = []

def addScenario(c, name):
    scenario = importlib.import_module(name)
    reload(scenario)

    for key, value in scenario.c.items():
        log.msg("Add scenario. Append '{}':{}".format(
            key,
            [item.name for item in value] )
        )

        c[key].extend(value)

    #scenarios_and_dependences.append(name + ".py")
    if hasattr(scenario, 'dependent_local_modules'):
        scenarios_and_dependences.extend(scenario.dependent_local_modules)

c = BuildmasterConfig = {}
c['change_source'] = []
c['schedulers'] = []
c['builders'] = []
c['services'] = []

####### Clean logs
c['configurators'] = [util.JanitorConfigurator(
    logHorizon=timedelta(weeks=4),
    hour=12,
    dayOfWeek=6)]

####### WORKERS

# The 'workers' list defines the set of recognized workers. Each element is
# a Worker object, specifying a unique worker name and password.  The same
# worker name and password must be configured on the worker.
qemu_connection=os.environ.get("BUILDBOT_QEMU_CONNECTION")
if qemu_connection:
    slave_passwd = os.environ.get("BUILDBOT_SLAVE_PASSWORD", "secret")
    c['workers'] = [
        worker.Worker("build-nix", slave_passwd, max_builds=2),
    #    worker.Worker("build-win", slave_passwd, max_builds=1),
        worker.LibVirtWorker("build-win", slave_passwd,
                        util.Connection(qemu_connection),
                        '/home/ngw_admin/images/win7_builder.qcow2',
                        # '/var/lib/libvirt/images/win7_64.qcow2'
                        ),
    #    worker.Worker("build-mac", slave_passwd, max_builds=1),
        worker.LibVirtWorker("build-mac", slave_passwd,
                        util.Connection(qemu_connection),
                        '/home/ngw_admin/images/mac_builder.qcow2',
                        ),
    ]

scenarios = [] #'updatedocs', 'makedocs', 'makedeb', 'makedeb_dev', 'makedeb_misc',
#             'makengidtests', 'makeborsch',
#             'make_installer_framework', 'create_installer',
#            ]

for scenario in scenarios:
    scenarios_and_dependences.append(scenario + ".py")

# 'protocols' contains information about protocols which master will use for
# communicating with workers. You must define at least 'port' option that workers
# could connect to your master with this protocol.
# 'port' must match the value configured into the workers (with their
# --master option)
c['protocols'] = {'pb': {'port': os.environ.get("BUILDBOT_WORKER_PORT", 9989)}}

### Add scenarios
for scenario in scenarios:
    if os.path.isfile(scenario + ".py"):
        addScenario(c, scenario)

####### BUILDBOT SERVICES

# 'services' is a list of BuildbotService items like reporter targets. The
# status of each build will be pushed to these targets. buildbot/reporters/*.py
# has a variety to choose from, like IRC bots.

template=u'''\
<h4>Build status: {{ summary }}</h4>
<p> Worker used: {{ workername }}</p>
<p> Steps:<br>
{% for step in build['steps'] %}
{{ step['name'] }}: {{ step['result'] }}<br>
{% endfor %}
</p>
<p><b>--<br>
Your NextGIS BuildBot</b></p>
mailto:buildbot@nextgis.com<br>
web:https://buildbot.nextgis.com<br>
'''

extraRecipients = []
extraRecipientsStr = os.environ.get("BUILDBOT_EMAIL_RECIPIENTS")
if extraRecipientsStr:
    extraRecipients = extraRecipientsStr.split(",")
m = reporters.MailNotifier(
    fromaddr="buildbot@nextgis.com",
    mode=('change', 'failing', 'passing', 'problem', 'warnings', 'exception'),
    extraRecipients=extraRecipients,
    relayhost=os.environ.get("BUILDBOT_EMAIL_RELAYHOST", "192.168.255.1"),
    useTls=True,
    sendToInterestedUsers=False,
    messageFormatter=reporters.MessageFormatter(
       template=template, template_type='html',
       wantProperties=True, wantSteps=True)
)
c['services'].append(m)

# context = util.Interpolate("buildbot/%(prop:buildername)s")
gs_tocken = os.environ.get("BUILDBOT_APITOKEN_GITHUB")
if gs_tocken:
    gs = reporters.GitHubStatusPush(
        token=gs_tocken,
        startDescription='Build started.',
        endDescription='Build done.'
    )
    c['services'].append(gs)

gl_token = os.environ.get("BUILDBOT_APITOKEN_GITLAB")
if gl_token:
    gl = reporters.GitLabStatusPush(
        token=gl_token,
        startDescription='Build started.',
        endDescription='Build done.'
    )
    c['services'].append(gl)

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot installation's
# home pages (linked to the 'titleURL').

c['title'] = "NextGIS"
c['titleURL'] = "http://nextgis.com"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server is visible. This typically uses the port number set in
# the 'www' entry below, but with an externally-visible host name which the
# buildbot cannot figure out without some help.

c['buildbotURL'] = os.environ.get("BUILDBOT_WEB_URL", "https://buildbot.nextgis.com/")

# minimalistic config to activate new web UI
c['www'] = {
    'port': os.environ.get("BUILDBOT_WEB_PORT", 8010),
    'plugins': {
	'waterfall_view': {},
	'console_view': {},
	'grid_view': {},
	'badges': {},
    },
    'versions':[
        ('master.cfg', '3.0.0'),
    ],
    # 'auth': ldapauth.LDAPAuth(os.environ.get("BUILDBOT_LDAP_URL", "ldap://192.168.250.1"),
    #                           os.environ.get("BUILDBOT_LDAP_DN", "dc=nextgis,dc=com"),
    #                           os.environ.get("BUILDBOT_LDAP_BIND", "cn=admin,dc=nextgis,dc=com"),
    #                           os.environ.get("BUILDBOT_LDAP_BINDPWD", "secret"),
    #                           os.environ.get("BUILDBOT_LDAP_GROUP", "buildbot"),
    # 'authz': util.Authz(
    #     allowRules=[
    # 	    util.AnyEndpointMatcher(role="buildbot", defaultDeny=True),
    # 	],
    #     roleMatchers=[
    # 	    util.RolesFromGroups(),
    # 	]
    # )
}

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : os.environ.get("BUILDBOT_DB_URL", "sqlite://"),
}
